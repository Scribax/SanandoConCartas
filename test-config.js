// Script de prueba para verificar que toda la configuraci√≥n funciona correctamente

const nodemailer = require('nodemailer');

console.log('üß™ INICIANDO PRUEBAS DE CONFIGURACI√ìN\n');

// ===== CONFIGURACI√ìN =====
const CONFIG = {
    email: {
        user: 'bostonstock2025@gmail.com',
        pass: 'ppgt nhfg nbgz oepx'
    },
    mercadopago: {
        public_key: 'APP_USR-82a9259a-1964-4bbe-a4c4-8ab50745ba4d',
        access_token: 'APP_USR-2823973966774541-070800-09828874bdf313cfa30a5c8f334e7f9b-305616995'
    },
    googleDrive: 'https://drive.google.com/drive/folders/1QuJYZSicxy8Sd1V-jl42lGKSU43_UOAh?usp=sharing'
};

// ===== PRUEBA 1: CONFIGURACI√ìN DE EMAIL =====
async function testEmailConfig() {
    console.log('1Ô∏è‚É£ Probando configuraci√≥n de email...');
    
    try {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: CONFIG.email.user,
                pass: CONFIG.email.pass
            }
        });

        // Verificar conexi√≥n
        await transporter.verify();
        console.log('   ‚úÖ Email configurado correctamente');
        return true;
    } catch (error) {
        console.log('   ‚ùå Error en configuraci√≥n de email:', error.message);
        return false;
    }
}

// ===== PRUEBA 2: CREDENCIALES DE MERCADOPAGO =====
async function testMercadoPagoConfig() {
    console.log('2Ô∏è‚É£ Probando credenciales de MercadoPago...');
    
    try {
        // Verificar formato de las credenciales
        if (!CONFIG.mercadopago.public_key.startsWith('APP_USR-')) {
            throw new Error('Public Key no tiene el formato correcto');
        }
        
        if (!CONFIG.mercadopago.access_token.startsWith('APP_USR-')) {
            throw new Error('Access Token no tiene el formato correcto');
        }

        console.log('   ‚úÖ Formato de credenciales MercadoPago correcto');
        console.log('   üìù Public Key:', CONFIG.mercadopago.public_key.substring(0, 20) + '...');
        console.log('   üìù Access Token:', CONFIG.mercadopago.access_token.substring(0, 20) + '...');
        return true;
    } catch (error) {
        console.log('   ‚ùå Error en credenciales MercadoPago:', error.message);
        return false;
    }
}

// ===== PRUEBA 3: GOOGLE DRIVE =====
async function testGoogleDriveConfig() {
    console.log('3Ô∏è‚É£ Probando configuraci√≥n de Google Drive...');
    
    try {
        const url = new URL(CONFIG.googleDrive);
        if (!url.hostname.includes('drive.google.com')) {
            throw new Error('URL no es de Google Drive');
        }
        
        console.log('   ‚úÖ URL de Google Drive v√°lida');
        console.log('   üìù Link:', CONFIG.googleDrive);
        return true;
    } catch (error) {
        console.log('   ‚ùå Error en URL de Google Drive:', error.message);
        return false;
    }
}

// ===== PRUEBA 4: ENV√çO DE EMAIL DE PRUEBA =====
async function testEmailSending() {
    console.log('4Ô∏è‚É£ Probando env√≠o de email...');
    
    try {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: CONFIG.email
        });

        const testEmail = {
            from: `"Sanando Con Cartas Test üîÆ" <${CONFIG.email.user}>`,
            to: CONFIG.email.user, // Enviarse a s√≠ mismo
            subject: 'üß™ PRUEBA - Sistema de Entrega Configurado',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 2px solid #6B46C1; border-radius: 10px;">
                    <h2 style="color: #6B46C1; text-align: center;">üéâ ¬°Sistema Configurado Correctamente!</h2>
                    
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                        <h3>‚úÖ Configuraci√≥n Verificada:</h3>
                        <ul>
                            <li>üìß Email: ${CONFIG.email.user}</li>
                            <li>üí≥ MercadoPago: Credenciales configuradas</li>
                            <li>üìÅ Google Drive: ${CONFIG.googleDrive}</li>
                        </ul>
                    </div>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="${CONFIG.googleDrive}" style="background: linear-gradient(135deg, #6B46C1 0%, #EC4899 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px;">
                            üìÇ ACCEDER A LA BIBLIOTECA
                        </a>
                    </div>
                    
                    <p style="color: #666; font-size: 12px; text-align: center;">
                        Este es un email de prueba para verificar que tu sistema est√° funcionando correctamente.
                    </p>
                </div>
            `
        };

        await transporter.sendMail(testEmail);
        console.log('   ‚úÖ Email de prueba enviado exitosamente');
        console.log('   üìß Revisa tu bandeja de entrada:', CONFIG.email.user);
        return true;
    } catch (error) {
        console.log('   ‚ùå Error enviando email de prueba:', error.message);
        return false;
    }
}

// ===== EJECUTAR TODAS LAS PRUEBAS =====
async function runAllTests() {
    console.log('üöÄ SISTEMA DE PRUEBAS - SANANDO CON CARTAS');
    console.log('==========================================\n');

    const results = {
        email: await testEmailConfig(),
        mercadopago: await testMercadoPagoConfig(),
        googleDrive: await testGoogleDriveConfig(),
        emailSending: false
    };

    // Solo probar env√≠o si la configuraci√≥n b√°sica funciona
    if (results.email) {
        results.emailSending = await testEmailSending();
    }

    // Resumen final
    console.log('\nüìä RESUMEN DE PRUEBAS:');
    console.log('====================');
    console.log(`üìß Configuraci√≥n Email: ${results.email ? '‚úÖ' : '‚ùå'}`);
    console.log(`üí≥ MercadoPago: ${results.mercadopago ? '‚úÖ' : '‚ùå'}`);
    console.log(`üìÅ Google Drive: ${results.googleDrive ? '‚úÖ' : '‚ùå'}`);
    console.log(`üì§ Env√≠o de Email: ${results.emailSending ? '‚úÖ' : '‚ùå'}`);

    const allPassed = Object.values(results).every(result => result === true);
    
    if (allPassed) {
        console.log('\nüéâ ¬°TODAS LAS PRUEBAS PASARON!');
        console.log('Tu sistema est√° listo para vender autom√°ticamente.');
        console.log('\nüî• PR√ìXIMOS PASOS:');
        console.log('1. Ejecuta: node backend-config.js');
        console.log('2. Abre tu p√°gina web');
        console.log('3. ¬°Comienza a vender!');
    } else {
        console.log('\n‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON');
        console.log('Revisa las configuraciones marcadas con ‚ùå');
    }

    return allPassed;
}

// Ejecutar si se llama directamente
if (require.main === module) {
    runAllTests().catch(console.error);
}

module.exports = { runAllTests, CONFIG };